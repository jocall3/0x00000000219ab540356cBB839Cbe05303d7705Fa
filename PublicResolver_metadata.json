{
	"compiler": {
		"version": "0.4.18+commit.9cf6e910"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": true,
				"inputs": [
					{
						"name": "interfaceID",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					},
					{
						"name": "key",
						"type": "string"
					},
					{
						"name": "value",
						"type": "string"
					}
				],
				"name": "setText",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					},
					{
						"name": "contentTypes",
						"type": "uint256"
					}
				],
				"name": "ABI",
				"outputs": [
					{
						"name": "contentType",
						"type": "uint256"
					},
					{
						"name": "data",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					},
					{
						"name": "x",
						"type": "bytes32"
					},
					{
						"name": "y",
						"type": "bytes32"
					}
				],
				"name": "setPubkey",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "content",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "addr",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					},
					{
						"name": "key",
						"type": "string"
					}
				],
				"name": "text",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					},
					{
						"name": "contentType",
						"type": "uint256"
					},
					{
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "setABI",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "name",
				"outputs": [
					{
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					},
					{
						"name": "name",
						"type": "string"
					}
				],
				"name": "setName",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					},
					{
						"name": "hash",
						"type": "bytes"
					}
				],
				"name": "setMultihash",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					},
					{
						"name": "hash",
						"type": "bytes32"
					}
				],
				"name": "setContent",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "pubkey",
				"outputs": [
					{
						"name": "x",
						"type": "bytes32"
					},
					{
						"name": "y",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					},
					{
						"name": "addr",
						"type": "address"
					}
				],
				"name": "setAddr",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "multihash",
				"outputs": [
					{
						"name": "",
						"type": "bytes"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "ensAddr",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "a",
						"type": "address"
					}
				],
				"name": "AddrChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "hash",
						"type": "bytes32"
					}
				],
				"name": "ContentChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "name",
						"type": "string"
					}
				],
				"name": "NameChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"name": "contentType",
						"type": "uint256"
					}
				],
				"name": "ABIChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "x",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "y",
						"type": "bytes32"
					}
				],
				"name": "PubkeyChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "indexedKey",
						"type": "string"
					},
					{
						"indexed": false,
						"name": "key",
						"type": "string"
					}
				],
				"name": "TextChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"name": "hash",
						"type": "bytes"
					}
				],
				"name": "MultihashChanged",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"ABI(bytes32,uint256)": {
					"params": {
						"contentTypes": "A bitwise OR of the ABI formats accepted by the caller.\r",
						"node": "The ENS node to query\r"
					},
					"return": "contentType The content type of the return value\rdata The ABI data\r"
				},
				"addr(bytes32)": {
					"params": {
						"node": "The ENS node to query.\r"
					},
					"return": "The associated address.\r"
				},
				"content(bytes32)": {
					"params": {
						"node": "The ENS node to query.\r"
					},
					"return": "The associated content hash.\r"
				},
				"multihash(bytes32)": {
					"params": {
						"node": "The ENS node to query.\r"
					},
					"return": "The associated multihash.\r"
				},
				"name(bytes32)": {
					"params": {
						"node": "The ENS node to query.\r"
					},
					"return": "The associated name.\r"
				},
				"pubkey(bytes32)": {
					"params": {
						"node": "The ENS node to query\r"
					},
					"return": "x, y the X and Y coordinates of the curve point for the public key.\r"
				},
				"setABI(bytes32,uint256,bytes)": {
					"params": {
						"contentType": "The content type of the ABI\r",
						"data": "The ABI data.\r",
						"node": "The node to update.\r"
					}
				},
				"setAddr(bytes32,address)": {
					"params": {
						"addr": "The address to set.\r",
						"node": "The node to update.\r"
					}
				},
				"setContent(bytes32,bytes32)": {
					"params": {
						"hash": "The content hash to set\r",
						"node": "The node to update.\r"
					}
				},
				"setMultihash(bytes32,bytes)": {
					"params": {
						"hash": "The multihash to set\r",
						"node": "The node to update.\r"
					}
				},
				"setName(bytes32,string)": {
					"params": {
						"name": "The name to set.\r",
						"node": "The node to update.\r"
					}
				},
				"setPubkey(bytes32,bytes32,bytes32)": {
					"params": {
						"node": "The ENS node to query\r",
						"x": "the X coordinate of the curve point for the public key.\r",
						"y": "the Y coordinate of the curve point for the public key.\r"
					}
				},
				"setText(bytes32,string,string)": {
					"params": {
						"key": "The key to set.\r",
						"node": "The node to update.\r",
						"value": "The text data value to set.\r"
					}
				},
				"supportsInterface(bytes4)": {
					"params": {
						"interfaceID": "The ID of the interface to check for.\r"
					},
					"return": "True if the contract implements the requested interface.\r"
				},
				"text(bytes32,string)": {
					"params": {
						"key": "The text data key to query.\r",
						"node": "The ENS node to query.\r"
					},
					"return": "The associated text data.\r"
				}
			}
		},
		"userdoc": {
			"methods": {
				"ABI(bytes32,uint256)": {
					"notice": "Returns the ABI associated with an ENS node.\r Defined in EIP205.\r"
				},
				"addr(bytes32)": {
					"notice": "Returns the address associated with an ENS node.\r"
				},
				"content(bytes32)": {
					"notice": "Returns the content hash associated with an ENS node.\r Note that this resource type is not standardized, and will likely change\r in future to a resource type based on multihash.\r"
				},
				"multihash(bytes32)": {
					"notice": "Returns the multihash associated with an ENS node.\r"
				},
				"name(bytes32)": {
					"notice": "Returns the name associated with an ENS node, for reverse records.\r Defined in EIP181.\r"
				},
				"pubkey(bytes32)": {
					"notice": "Returns the SECP256k1 public key associated with an ENS node.\r Defined in EIP 619.\r"
				},
				"setABI(bytes32,uint256,bytes)": {
					"notice": "Sets the ABI associated with an ENS node.\r Nodes may have one ABI of each content type. To remove an ABI, set it to\r the empty string.\r"
				},
				"setAddr(bytes32,address)": {
					"notice": "Sets the address associated with an ENS node.\r May only be called by the owner of that node in the ENS registry.\r"
				},
				"setContent(bytes32,bytes32)": {
					"notice": "Sets the content hash associated with an ENS node.\r May only be called by the owner of that node in the ENS registry.\r Note that this resource type is not standardized, and will likely change\r in future to a resource type based on multihash.\r"
				},
				"setMultihash(bytes32,bytes)": {
					"notice": "Sets the multihash associated with an ENS node.\r May only be called by the owner of that node in the ENS registry.\r"
				},
				"setName(bytes32,string)": {
					"notice": "Sets the name associated with an ENS node, for reverse records.\r May only be called by the owner of that node in the ENS registry.\r"
				},
				"setPubkey(bytes32,bytes32,bytes32)": {
					"notice": "Sets the SECP256k1 public key associated with an ENS node.\r"
				},
				"setText(bytes32,string,string)": {
					"notice": "Sets the text data associated with an ENS node and key.\r May only be called by the owner of that node in the ENS registry.\r"
				},
				"supportsInterface(bytes4)": {
					"notice": "Returns true if the resolver implements the interface specified by the provided hash.\r"
				},
				"text(bytes32,string)": {
					"notice": "Returns the text data associated with an ENS node and key.\r"
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"PublicResolver.sol": "PublicResolver"
		},
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"ENS.sol": {
			"keccak256": "0x323ac7a5b1e5cdf19b5312f91581b08339e1b7aed7fdbe30338596f34fa22127",
			"urls": [
				"bzzr://3deb73de2d9c6b25b831e8f0c641df08f4c1f151fedc2780b464c085b49f158c"
			]
		},
		"PublicResolver.sol": {
			"keccak256": "0x71817c8fdf99fded551ec3aa1a6ff93d2f17225fe6f927acd55e8b5f5773e025",
			"urls": [
				"bzzr://6b3767820412650474f9329c5db3b362abc3207e51adfa6035be0dc9da27ca29"
			]
		}
	},
	"version": 1
}